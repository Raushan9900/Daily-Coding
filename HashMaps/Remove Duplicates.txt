Problem Statement
Ninja is playing with numbers but hates when he gets duplicate numbers. Ninja is provided an array, and he wants to remove all duplicate elements and return the array, but he has to maintain the order in which the elements were supplied to him.
Input Format:
The first line contains a single integer T representing the number of test cases. 

The first line of each test case will contain the integer N.

The second and last line contains N space-separated integers that denote the elements of the given array.
Output Format:
For each test case, return the new array that does not contain any duplicates of the input array.

The output of each test case should be printed in a separate line.
Note:
You do not need to print anything; it has already been taken care of. Just implement the given function. 
Constraints:
1 <= T <= 10
1 <= N <= 5*10^3
-10^5 <= arr[i] <= 10^5

Time Limit: 1 sec
Sample Input 1 :
2
5
1 2 2 3 4
5
10 11 23 23 23 
Sample Output 1:
 1 2 3 4
 10 11 23
Explanation For Sample Input 1:
In the first test case, ‘2’ is a duplicate element, and there are two occurrences of ‘2’, so one ‘2’ is removed, and the resultant array becomes [1 2 3 4].

In the second test case, ‘23’ is a duplicate element, and there are three occurrences of ‘23’, so two occurrences of ‘23’ must be removed, and the resultant array becomes [10 11 23].
Sample Input 2 :
 2
 10
 1 3 3 3 3 3 4 9 23 35
 5
 10 10 10 10 10 
Sample Output 2:
 1 3 4 9 23 35
 10 



import java.util.ArrayList;
import java.util.HashMap;
public class Solution {

	public static ArrayList<Integer> removeDuplicates(ArrayList<Integer> arr) {
		// Write your code here.
        HashMap<Integer,Integer> hm = new HashMap<>();
        ArrayList<Integer> new_arr = new ArrayList<>();
        for(int i=0;i<arr.size();i++){
            if(hm.containsKey(arr.get(i))){
                continue;
            }
            else{
                hm.put(arr.get(i),1);
                new_arr.add(arr.get(i));
            }
        }
        return new_arr;
        

	}
}